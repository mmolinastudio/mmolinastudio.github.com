<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: github | Miguel Molina]]></title>
  <link href="http://miguel-molina.es/blog/categories/github/atom.xml" rel="self"/>
  <link href="http://miguel-molina.es/"/>
  <updated>2013-07-20T18:37:48+02:00</updated>
  <id>http://miguel-molina.es/</id>
  <author>
    <name><![CDATA[Miguel Molina]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GitHub. Cómo participar en el proyecto de un amigo.]]></title>
    <link href="http://miguel-molina.es/blog/2013/06/05/github-colaborar-en-el-proyecto-de-un-amigo/"/>
    <updated>2013-06-05T20:02:00+02:00</updated>
    <id>http://miguel-molina.es/blog/2013/06/05/github-colaborar-en-el-proyecto-de-un-amigo</id>
    <content type="html"><![CDATA[<p>Hoy he tenido que averiguar cómo participar en el proyecto de otro usuario de github. Por un momento he pensado que lo más fácil era trabajar con su cuenta (usando su username/password), pero era evidente que debía haber una forma fácil de participar en un proyecto ajeno usando mi propia cuenta de github. A continuación explicaré cómo hacerlo.</p>

<h3>1. Obtener acceso como colaborador</h3>

<p>El dueño del repositorio en el que vamos a trabajar ha de darnos acceso como colaborador. Para ello deberá acceder al repositorio, entrar en <em>settings/collaborators</em> y añadirnos -<em>add a friend</em>- a la lista.</p>

<h3>2. Crear una nueva clave SSH</h3>

<pre><code>$ ssh-keygen -t rsa -C "my-friend's-email-address"
</code></pre>

<p>Probablemente nos dirá que ya existe una clave ssh. Aquí hemos de tener cuidado de no sobreescribir la clave que ya teníamos para nuestro usuario. Si por ejemplo el repositorio donde quiero trabajar se llama <em>projectx</em>, podemos llamar al archivo <em>~/.ssh/id_rsa_projectx</em>.</p>

<h3>3. Agregar la clave en gitHub</h3>

<p>Le damos la clave SSH a nuestro amigo. Para obtenerla, hacer:</p>

<pre><code>$ cat ~/.ssh/id_rsa_projectx.pub
</code></pre>

<p>obtendremos algo como esto:</p>

<pre><code>ssh-rsa "un-monton-de-letras-y-numeros" emaildenuestroamigo@something.com
</code></pre>

<p>Nuestro amigo deberá acceder a su cuenta, ir a <a href="https://github.com/settings/ssh">https://github.com/settings/ssh</a> y crear una nueva clave ssh para nuestro equipo, poniendole un título descriptivo (e.g. <em>Git - jimmyUbuntu - 5.junio.2013</em>) y en el cuadro grande pegar la clave ssh.</p>

<h3>4. Archivo de configuración</h3>

<p>Crearemos un archivo de configuración para poder usar fácilmente una clave ssh u otra a la hora de hacer deploy.</p>

<pre><code>$ touch ~/.ssh/config
</code></pre>

<p>Lo abrimos y escribimos lo siguiente:</p>

<pre><code>#Default GitHub
Host github.com
  HostName github.com
  User git
  IdentityFile ~/.ssh/id_rsa

Host github-projectx
  HostName github.com
  User git
  IdentityFile ~/.ssh/id_rsa_projectx
</code></pre>

<h3>5. Deploy</h3>

<p>Añadimos el repositorio remoto con:</p>

<pre><code>$ git remote add origin git@github-projectx:friendusername/projectx.git
</code></pre>

<p>Puede que nos de el siguiente error: <code>fatal: remote origin already exists</code> En ese caso haremos:</p>

<pre><code>$ git remote rm origin
</code></pre>

<p>Y volveremos a ejecutar:</p>

<pre><code>$ git remote add origin git@github-projectx:friendusername/projectx.git
</code></pre>

<p>Llegado a este punto, ya tenemos todo configurado para trabajar con el repositorio remoto. Ahora podremos hacer pull/push al repositorio remoto.</p>

<pre><code>$ git pull origin master
</code></pre>

<p>Si antes de hacer el pull ya tuvieramos algo en la carpeta del proyecto, haría automáticamente el merge, lo que podría darnos algún conflicto entre archivos que <a href="http://git-scm.com/book/es/Ramificaciones-en-Git-Procedimientos-b%C3%A1sicos-para-ramificar-y-fusionar#Principales-conflictos-que-pueden-surgir-en-las-fusiones">tendríamos que resover</a>.</p>

<p>Referencias:</p>

<p><small>Documentación de Git. <a href="http://git-scm.com/book/es/">http://git-scm.com/book/es/</a></small><br>
<small>How to Work with GitHub and Multiple Accounts. <a href="http://net.tutsplus.com/tutorials/tools-and-tips/how-to-work-with-github-and-multiple-accounts/">http://net.tutsplus.com/tutorials/tools-and-tips/how-to-work-with-github-and-multiple-accounts/</a></small><br>
<small>Configurar repositorio Git para trabajo en grupo. <a href="http://snarvaez.com.ar/libertad/index.php/2012/04/21/configurar-repositorio-git-para-trabajo-en-grupo-ssh-key-generation-and-distribution/">http://snarvaez.com.ar/libertad/index.php/2012/04/21/configurar-repositorio-git-para-trabajo-en-grupo-ssh-key-generation-and-distribution/</a></small></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Documentación de Git en Español]]></title>
    <link href="http://miguel-molina.es/blog/2013/05/14/documentacion-de-git-en-castellano/"/>
    <updated>2013-05-14T13:55:00+02:00</updated>
    <id>http://miguel-molina.es/blog/2013/05/14/documentacion-de-git-en-castellano</id>
    <content type="html"><![CDATA[<p>A pesar de que en la carrera tuve una asignatura llamada "Herramientas de Programacion", algo que ahora echo en falta es, precisamente, una mejor preparación en cuanto a herramientas de programación.</p>

<p>En esa asignatura (que por cierto, sólo se daba en Ingeniería Informática y no en las técnicas, cosa que no me explico), se estudiaba teoría y práctica de Compiladores, Depuradores, Editores de texto, Bash, Optimización de Código,... y obviamente Control de Versiones. Lógicamente no había un libro oficial que incluyera todo y los apuntes eran las transparencias de clase, que hoy en día las veo y me pregunto como podía estudiar con eso. ¿Por qué muchos profesores no querían dar los apuntes en otro formato? Nunca lo sabré.</p>

<p>En definitiva. Estaba muy bien que existiera esa asignatura, y que además sólo enseñasen herramientas de software libre, pero por unos motivos u otros, después de cursarla seguías programando con las mismas herramientas que antes. Bueno, le sacabas provecho a gdb, make, bash, kate,... incluso alguno de mis amigos le cogió cariño a grep, cat, vim, y cosas así. Pero en cuanto a Control de Versiones, no recuerdo que ninguno de mis compañeros de carrera usase nunca CVS (que era lo que se enseñaba). Por otro lado, ninguno de mis profesores de otras asignaturas y cursos posteriores nos animó a usar CVS, SVN o cualquier otra cosa, pese a lo útil que habría sido en muchas ocasiones, donde se programaba mucho y a veces en grupo.</p>

<p>Pensaba que esas <em>buenas practicas</em> las aprendería al entrar en la empresa, pero pasé por tres pequeñas empresas y sólo una usaba SVN. El servidor ya estaba configurado (la aplicación llevaba unos 4 o 5 años en desarrollo) y la interfaz gráfica que usaban era fácil de usar, aunque realmente no me atrevía a tocarla demasiado. Lo usaba de forma muy básica. Sólo sabía que mientras estuviera editando un archivo, nadie más podía abrirlo. Y que después de trabajar con él debía dejarlo libre. Ojalá me acordase del programa. Era horriblemente lento.</p>

<p>La cuestión es que nunca he usado en profundidad ningún programa de control de versiones. Desde hace algo más de un año he querido aprender Git, pero a la hora de ponerme a picar seguía con la mismas malas prácticas de siempre, por eso de que no estaba trabajando para nadie y me apañaba con mi forma de organizarme. Que básicamente consistía en: Hago cambios -> ¿Funciona? si -> sobreescribo | no -> ctrl+z. Y de vez en cuando guardar una copia del proyecto.</p>

<p>Hace unos tres o cuatro meses me decidí por fin a usar Git en todos mis proyectos. He de decir que <a href="http://windows.github.com/" title="github for windows">Github for Windows</a> me ayudó bastante a dar ese paso. La interfaz está bien diseñada, es bonita e increiblemente fácil de usar. En cuanto a git en la consola de linux, el uso que le he dado hasta el momento ha sido muy básico; crear repositorios, hacer commits, configurarlo con mi cuenta de github y poco más. Pero me pierdo un poco cuando empiezo a crear branches, deshacer cambios, o cosas mas complejas, por eso necesito ponerme en serio y dedicarle algo de tiempo. Ayer vi que ya estaba casi toda la documentación traducida al castellano, así que la junté en un archivo junto a varias Cheat Sheets y hoy lo he imprimido y encuadernado (a ver cuando me compro un kindle).</p>

<p>Dejo aquí los archivos por si alguien (o yo mismo) quiere la documentación de GIT en odt/pdf. <small>Actualizada a día 13 de mayo. 92% traducido.</small><br/><strong><a href="/archivos/git_book.pdf">git_book.pdf</a></strong><br/><strong><a href="/archivos/git_book.odt">git_book.odt</a></strong></p>

<p>Documentación oficial de Git en Español: <a href="http://git-scm.com/book/es">http://git-scm.com/book/es</a></p>

<p>Si alguien lee esto, un abrazo!</p>
]]></content>
  </entry>
  
</feed>
